/*This program simulates an elevator dropping off people at different floors.
 * Assigned by Nishanth
 * Author: Shreyas
 */
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

public class Elevator {
	public static void main(String args[]) {
		
		//Calling the function numberStops and printing it
		System.out.println("Number of Stops=" + numberStops());
	}
	
	/*The method Exclusion generates a random number within a given range. 
	  It also excludes numbers within that range that have already been generated by it.
	 */
	public static int Exclusion(Random rnd, int start, int end, Object[] objects) {
		int random = start + rnd.nextInt(end - start + 1 - (objects.length));
		for (Object ex : objects) {
			if (Integer.valueOf(random) < ((Integer) ex)) {
				break;
			}
			random++;
		}
		return random;
	}

	public static int numberStops() {

		List<Integer> ex = new ArrayList<>();
		List<Integer> copy = new ArrayList<>();
		Map<Integer, Integer> arr1 = new HashMap<>();
		
		//Declaration and initialization of HashMap arr1 where people are keys and their weight in pounds are values
		arr1.put(1, 40);
		arr1.put(2, 40);
		arr1.put(3, 100);
		arr1.put(4, 80);
		arr1.put(5, 20);
		
		//Initialization of ArrayList copy to be used for comparison later in the code
		copy.add(1);
		copy.add(2);
		copy.add(3);
		copy.add(4);
		copy.add(5);
		
		int stop = 0;
		System.out.println(arr1 + " are waiting in lobby");
		
		int elevatorWeight = 0;
		
		//Initializing counters with person's ID number
		int counter1 = 1;
		int counter2 = 2;
		int counter3 = 3;
		int counter4 = 4;
		int counter5 = 5;

		Random rnd = new Random();
		
		//Randomly generating first person who enters the elevator
		int removeFromLobby = (int) (Math.random() * counter5) + counter1;

		while (true) {
			
			//Comparing the generated person with personID to make him enter the elevator
			if (removeFromLobby == counter1 || removeFromLobby == counter2 || removeFromLobby == counter3
					|| removeFromLobby == counter4 || removeFromLobby == counter5) {
				
				//Add person to a list to keep a tab of who has entered the elevator 
				ex.add(removeFromLobby);
				System.out.println();
				System.out.println(removeFromLobby + " is entering Elevator whose weight is " + arr1.get(removeFromLobby));
				
				//Add generated person's weight to elevator weight
				elevatorWeight += arr1.get(removeFromLobby);
				System.out.println(elevatorWeight + " is Elevator's current weight");

			}

			if (elevatorWeight < 200) {
				
				//Remove the generated person from lobby
				arr1.remove(removeFromLobby);

			}
			if (elevatorWeight == 200 || (elevatorWeight == 180 && !arr1.containsValue(20))) {
				
				arr1.remove(removeFromLobby);
				break;
				
			}
			if (elevatorWeight > 200) {
				
				//person exits to undo elevator's max capacity
				elevatorWeight -= arr1.get(removeFromLobby);

				System.out.println();
				System.out.println(removeFromLobby + " Stepped out to make room: ");
				System.out.println(elevatorWeight + " is current weight");
			}
			
			//Used to sort list which is keeping tab of persons who entered the elevator
			Collections.sort(ex);
			
			//Calling function Exclusion to generate a person who is not yet in elevator
			removeFromLobby = Exclusion(rnd, counter1, counter5, (ex.toArray()));
		}
		System.out.println();
		System.out.println("Elevator's Total weight is: " + elevatorWeight);
		System.out.println("Last ones to get into elevator after it has dropped off others: " + arr1);
		System.out.println();
		
		//Calculation of number of stops based on remaining person/persons in lobby
		for (int number : copy) {
			stop += arr1.size() == number ? stop + 2 : stop++;
			stop += arr1.size() == number ? copy.size() - 1 : copy.size();
			break;

		}

		return stop;
	}
}